(function($){
	
/* HP cookie and segment options */
var hp_cookie_path = '/';
var hp_cookie_expiration = 90; // in days
var hp_cookie_domain = '.hp.com';
//var hp_cookie_domain = ''; // for debug purposes
var hmpg_segments = []; // array containing list of homepage's segments, in the order as in top navigation
var customerSegment;
var hmpg_expacc = []; // array containing list of homepage's explore&create accordions.
var default_expacc = 0;

// Cookie functions leveraged from old (Cleansheet) homepage used by GeoLocation script
window._CK_ = function(_duration, _path, _domain){
	this.domain = _domain;
	this.duration = _duration;
	this.path = _path;
	this.exist = function(_n){ var sM = document.cookie.match(new RegExp("(" + _n + "=[^;]*)(;|$)")); return sM ? unescape(sM[1]) : null; };
	this.get = function (_n) { var sR = document.cookie.match ( _n + '=(.*?)(;|$)' ); return sR ? unescape(sR[1]) : null; };
	this.set = function( _name, _value, _duration, _path, _domain, _secure ){
		var duration = (_duration) ? _duration : this.duration;
		var path = (_path) ? _path : this.path;
		var domain = (_domain) ? _domain : this.domain;
		var dExpires = '';
		if( duration ){ var date = new Date ( ); date.setTime(date.getTime()+(duration*24*60*60*1000));	dExpires = date.toGMTString(); }
		document.cookie = _name +"="+ escape(_value) +";expires="+dExpires + ((domain) ? "; domain=" + domain : "") + ((path) ? "; path=" + path : "");};
		this.del = function(_name, _domain) {
		var domain = (_domain) ? _domain : this.domain; var date = new Date(); date.setFullYear(date.getYear() - 1);
		document.cookie=_name + "=; expires=" + date.toGMTString() + ((domain) ? "; domain=" + domain : "") + ((this.path) ? "; path=" + this.path : "/"); };
};

window._Ck_ = new _CK_(hp_cookie_expiration, hp_cookie_path, hp_cookie_domain );

// Apply redirect to elements with data-href attribute
var isURL = function(url){
	return (/^([a-z]([a-z]|\d|\+|-|\.)*):(\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?((\[(|(v[\da-f]{1,}\.(([a-z]|\d|-|\.|_|~)|[!\$&'\(\)\*\+,;=]|:)+))\])|((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=])*)(:\d*)?)(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*|(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)|((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)|((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)){0})(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i).test(url);
};

var initDataHref = function(){
	var hrefAttr = 'data-href';

	// attach event to document with target 'data-href' 
	// instead of element directly for bubbling
	// to allow metrics to be sent prior redirection
	// even if metric is tied to an ancestor
	$(document).on('click','['+hrefAttr+']',function(e){
		// if clicked on the element and not a children
		// or the children is not an anchor and has no data-href
		// and if its actual children of currentTarget (nested data-href)
		// then proceed with redirection
		var url = $(this).attr(hrefAttr);
		if(e.target==this || (!$(e.target).attr(hrefAttr) && e.target.tagName.toLowerCase()!="a" && $(e.target).closest("["+hrefAttr+"]")[0]==this)){
			// if valid url then call window.location
			// else, if anchor with provided ID exists
			// call click on anchor
			if(isURL(url)){
				window.location = url; // Redirect to a valir url
			}else if($('a[id='+url+']')){
				$('a[id='+url+']')[0].click(); // Trigger click event on target anchor
			}
		}
	});
};


// Object to send impression metrics and set click metrics event
// on elements based on their 'data-metrics' attr
// impressions are grouped by 'data-impression' attr value
var DataMetrics = (function(){

	var impressionGroupAttr = 'data-impression',
		metricsAttr = 'data-metrics';

	// Try to execute a function immediatly
	// if fails, try again after # ms during # attempts
	var reTry = function(fn,options){
		var settings = {
			delay: 1000,
			attempts: 5,
			incremental: 1, // multiply delay by incremental after each attempt
			onFailure: null
		};

		// Override settings with passed options
		$.extend(settings,options);

		// Try to execute function.
		// If fails, reTry after 'delay' ms
		try{
			fn();
		}catch(err){
			// If attempts left reTry
			if(--settings.attempts>=0){
				// Retry method call after delay
				setTimeout(function(){
					// Increase delay based on incremental setting
					settings.delay = Math.round(settings.delay * settings.incremental);
					reTry(fn,settings);
			},settings.delay);
			}else if(typeof(settings.onFailure)=="function"){
				settings.onFailure(err); // Execute fallback if passed
			}

		}
	};

	// Return metric value
	var getMetricsData = function(element){
		return $(element).attr(metricsAttr) || $(element).attr('name'); //falling back to name attr for h&f
	};

	// Send impression with array of messages passed
	var sendImpressionMetrics = function(messages){
		reTry(function(){
			trackMetrics("promoClosedImpression", {'messages':messages});
		},{
			onFailure: function(er){
				// console.log('Failed to track metrics:');
				// console.log(er);
			}
		});
	};

	// Send click metrics with data
	var sendClickMetrics = function(element){
		reTry(function(){
			// Get url from href or data-href attribute. If not found, get href from closest ancestor anchor
			// var url = $(element).attr('href') || $(element).attr('data-href') || $(element).find('[data-href]').eq(0).attr('data-href'),
			var url = $(element).attr('href') || $(element).attr('data-href') || $(element).closest('[href]').attr('href'),
				message = 'promoClick',
				type = 'link',
				id = getMetricsData(element);

			trackMetrics(message, {'type':type, 'id':id, 'url':url});
		},{
			onFailure: function(er){
				// console.log('Failed to track metrics:');
				// console.log(er);
			}
		});
	};

	// Go through elements with 'data-impression' attr
	// group by 'data-impression' value and
	// send impression per group
	var _setImpressionMetrics = function(elements,options){
		elements = elements || $("["+impressionGroupAttr+"]");

		//Group by impression key
		var groups = [];
		elements.each(function(index,element){
			// var group = $(element).attr(impressionGroupAttr);
			// The original idea was to group impression and send more than 1 beacon.
			// As only one beacon is to be sent, will be creating only 1 group regardless of the value
			var group = impressionGroupAttr;
			if(!groups[group]){
				groups[group] = [getMetricsData(element)];
			}else{
				groups[group].push(getMetricsData(element));
			}
		});

		for(var i in groups){
			if(groups.hasOwnProperty(i)){
				sendImpressionMetrics(groups[i]);
			}
		}
	};

	// Set click event to elements
	// and call trackMetric method
	// with 'data-metrics' value
	var _setClickMetrics = function(elementsSelector){
		elementsSelector = elementsSelector || "["+metricsAttr+"]";
		$('body').on('click', elementsSelector, function(e){
			// if clicked on the element and not a children
			// or the children is not an anchor and has no data-metrics
			// and if its actual children of currentTarget (nested data-metrics)
			// then proceed with trackMetrics
			// if(e.target==this || (!$(e.target).attr(metricsAttr) && e.target.tagName.toLowerCase()!="a" && $(e.target).closest("["+metricsAttr+"]")[0]==this)){
			if(!e.metricSent){ //Optimized approach to validate that metric has not been sent on event bubbling
				sendClickMetrics(this);
				e.metricSent = true;
			}
		});
	};

	var _setHeaderFooterMetrics = function(){



		/* 
			Patch before HF R37
			HF is tracking iNav on links that do not open a new page. 
			This behavior is incorrect and happens due to the existence of the
			"link_metrics" class on those links with a "javascript:void(0)" href.

			This patch consists on removing the link_metrics class from the 
			links with href="javascript:void(0)"
		*/

		var elementsSelector = '.header .link_metrics, .footer .link_metrics';
		$('.header a[href^=javascript]').filter('.link_metrics').removeClass('link_metrics');
		
		// _setClickMetrics(elementsSelector); // As we are attaching both track calls inside the same listener, there is no need to setClickMetrics again
	};


	var _init = function(){
		_setImpressionMetrics();
		_setClickMetrics();

		if(!!window.location.search.match(/([?|&]+debug)=([^&]*)/)){
			_setHeaderFooterMetrics();
		}
	};

	return {
		init: _init,
		setImpressionMetrics: _setImpressionMetrics,
		setClickMetrics: _setClickMetrics
	};
})();


$(document).ready(function(){
	initDataHref();
	DataMetrics.init();
});

})(jQuery);